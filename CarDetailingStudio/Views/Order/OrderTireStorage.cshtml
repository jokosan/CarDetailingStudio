@model IEnumerable<CarDetailingStudio.Models.ModelViews.OrderServicesCarWashView>

@{
    ViewBag.Title = "Index";
}
<link href="~/Content/MvcGrid/mvc-grid.css" rel="stylesheet" />
<link href="~/Content/form.css" rel="stylesheet" />

@Html.Partial("_Menu")


<div class="row">
    <div class="col-12">
        <div class="card">

            <div class="card-body">
                <div class="row">
                    <div class="col-md-9">
                        <h5 class="card-title m-b-0">Static Table</h5>
                    </div>
                </div>
            </div>

            @if (ViewBag.Services == 4)
            {
                <div class="table-responsive">
                    <div class="table-responsive">
                        @(Html
                           .Grid(Model)
                           .Build(columns =>
                           {
                               
                               columns.Add(model => model.ClientsOfCarWash.NumberCar).Titled("Номер машины");
                               columns.Add(model => model.OrderDate).Titled("Дата и время заказа").Filterable(false);
                               columns.Add(model => model.DiscountPrice).Titled("Стоимость заказа").Filterable(false);

                               columns.Add(model => model.StatusOrder1.StatusOrder1).Titled("Статус заказа").Filterable(false);
                               columns.Add(model => model.ClientsOfCarWash.ClientInfo.Surname).Titled("Фамилия").Filterable(false);
                               columns.Add(model => model.ClientsOfCarWash.ClientInfo.Name).Titled("Имя").Sortable(false).Filterable(false);
                               columns.Add(model => model.ClientsOfCarWash.ClientInfo.PatronymicName).Titled("Отчество").Filterable(false);
                               columns.Add(model => model.ClientsOfCarWash.ClientInfo.Phone).Titled("Телефон");
                               columns.Add(model => @Html.ActionLink("Закрыть заказ", "../TireChangeService/CloseOrder", new { OrderId = model.Id }, new { @class = "btn btn-outline-success" })).Encoded(false);

                           })
                           .UsingFilterMode(GridFilterMode.Excel)
                           .Empty("No data found")
                           .Filterable(GridFilterType.Single)
                           .Sortable()
                           .Pageable(pager =>
                           {
                               pager.PageSizes = new Dictionary<int, string> { { 10, "10" }, { 25, "25" }, { 50, "50" } };
                               pager.ShowPageSizes = true;
                               pager.RowsPerPage = 1;
                           })
                            )
                    </div>
                </div>
            }
            else if (ViewBag.Services == 5)
            {
                <div class="table-responsive">
                    <div class="table-responsive">
                        @(Html
                           .Grid(Model)
                           .Build(columns =>
                           {
                               columns.Add(model => model.Id).Titled("Номер заказа");
                               columns.Add(model => model.ClientsOfCarWash.NumberCar).Titled("Номер машины");
                               columns.Add(model => model.OrderDate).Titled("Дата и время заказа").Filterable(false);
                               columns.Add(model => model.DiscountPrice).Titled("Стоимость заказа").Filterable(false);

                               columns.Add(model => model.StatusOrder1.StatusOrder1).Titled("Статус заказа").Filterable(false);
                               columns.Add(model => model.ClientsOfCarWash.ClientInfo.Surname).Titled("Фамилия").Filterable(false);
                               columns.Add(model => model.ClientsOfCarWash.ClientInfo.Name).Titled("Имя").Sortable(false).Filterable(false);
                               columns.Add(model => model.ClientsOfCarWash.ClientInfo.PatronymicName).Titled("Отчество").Filterable(false);
                               columns.Add(model => model.ClientsOfCarWash.ClientInfo.Phone).Titled("Телефон");
                               columns.Add(model => @Html.ActionLink("Закрыть заказ", "../TireStorage/InfoOrderTireStorage", new { idOrder = model.Id }, new { @class = "btn btn-outline-success" })).Encoded(false);

                           })
                           .UsingFilterMode(GridFilterMode.Excel)
                           .Empty("No data found")
                           .Filterable(GridFilterType.Single)
                           .Sortable()
                           .Pageable(pager =>
                           {
                               pager.PageSizes = new Dictionary<int, string> { { 10, "10" }, { 25, "25" }, { 50, "50" } };
                               pager.ShowPageSizes = true;
                               pager.RowsPerPage = 1;
                           })
                    )
                    </div>
                </div>
            }


        </div>
    </div>
</div>

<script src="~/Scripts/MvcGrid/mvc-grid.js"></script>
<script>
    [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
        new MvcGrid(element);
    });
</script>
<script src="~/Scripts/MvcGrid/mvc-grid-localizing.js"></script>
<script src="~/Scripts/MvcGrid/mvc-grid-localizing.js"></script>
